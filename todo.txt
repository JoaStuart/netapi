- Plants API function:
    def API_plants(self, args, body):
        try:
            pidx = -1 if len(args) == 0 else int(args[0])
        except:
            return None
        
        if pidx > 1:
            pidx = -1
        dta = api.moisture.read()
        crit: tuple[float, float] = tuple(cfg.read_property("plants.critical"))
        
        if pidx == -1:
            pok = tuple_lt(crit, dta)

            return {
                "streamdeck": {
                    "image": imgread_uri(f"./resources/images/plant_{"green" if pok else "red"}.png"),
                    "title": " | ".join(map(lambda f: str(round(f * 100)), dta)),
                },
                "plants": {
                    "data": list(dta),
                    "status": "OK" if pok else "NOT OK",
                },
            }
        elif pidx == 0:
            pok = crit[0] < dta[0]
            return {
                "streamdeck": {
                    "image": imgread_uri(f"./resources/images/plant_{"green" if pok else "red"}.png"),
                    "title": str(round(dta[0] * 100)),
                }
            }
        elif pidx == 1:
            pok = crit[1] < dta[1]
            return {
                "streamdeck": {
                    "image": imgread_uri(f"./resources/images/plant_{"green" if pok else "red"}.png"),
                    "title": str(round(dta[1] * 100)),
                }
            }


    ### API ###

    _dta = (0, (-1, -1))
    _reading = False


    def poll() -> tuple[float, float]:
        global _dta, _reading
        _reading = True
        with serial.Serial("COM6", 9600, dsrdtr=True) as srl:
            srl.write(b"c")
            srl.flush()
            rdata = srl.read_until(expected=b"\n").decode()
            if rdata.strip() != "checkok":
                log.error("Arduino CHECK didnt pass")
                return (-1, 1)

            srl.write(b"r")
            dta = srl.read_until().decode().strip()
            if len(dta.split(",")) != 2:
                log.error("Arduino sent data in wrong format")
                return (-1, 2)

            _dta = (time.time(), tuple([float(a) for a in dta.split(",")]))
            _reading = False


    def read() -> tuple[float, float]:
        global _dta, _reading
        while _reading:
            time.sleep(0.01)

        if _dta[0] < time.time() - 5:
            poll()

        return _dta[1]


- Not unlocking socket port 4001 after ^C